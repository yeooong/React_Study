1. useState

- 가장 기본적인 hook
- 함수형 컴포넌트 내에서 가변적인 상태를 갖게 함 = 변화하는 상태를 담아서 활용 할 수 있음.
- 카운터, Todolist에서 사용했었지...

- const [state, setState] = useState(초기값);
- state를 변경하는 방법 => setNumber(number+1);
- 함수형 업데이트도 있음
   setNumber((currentNumber)=> {return currentNumber +1});
   setNumber((currentNumber)=> currentNumber +1;) > return문이 짧을 때({},return 같이 생략)

- ref. React 손님 / 웨이터 / 주방 비유 > 주문을 모아서 주방으로 전달해야 효율적 = batch update


2. useEffect

- 의존성 배열(dependency array)의 개념을 같이 익혀둬야 함
   이 배열에 값을 넣으면, 그 값이 바뀔 때만 useEffect를 실행한다!
   한 편 의존성 배열이 비어있으면([]), 최초로 컴포넌트가 실행될 때만 useEffect가 실행됨
   왜냐하면 어떤 값이 변할 때만 실행하는 곳에 아무것도 넣지 않으면, 아무런 값이 변하지 않기 때문에 최초에만 실행된다!

- 어떤 컴포넌트가 렌더링(최초든 rerendering이든) 될 때마다 특정한 작업을 수행해야 할 때 설정하는 Hook

- 마운트(Mount)는 React에서 컴포넌트가 생성되어 DOM에 추가되는 것
- 언마운트(Unmount)는 React에서 컴포넌트가 DOM에서 제거되는 것

- 컴포넌트가 화면에 보여졌을 때(mount)
    useEffect(() => {
    console.log(`Hello, useEffect! : ${value}`);
    }, [value]);

- 컴포넌트가 화면에서 사라졌을 때(return) = clean up! (unmount)
    >> useEffect 안에 return문 안에 함수 작성
    
    useEffect(() => {
    console.log(`Hello, useEffect! : ${value}`);

    return () => {
      console.log('사라져요')
    }
    }, [value]);
    


3. useRef

- DOM요소에 접근할 수 있도록 하는 React Hook!
- 화면이 렌더링 되자마자 특정 input 태그가 focusing 돼야 하는 경우와 같이 React에서 DOM을 선택해야 할때 사용
    렌더링 됐을 때 특정 태그에 포거싱하고 싶다 = 특정 태그에 대한 ref를 가지고 있어야 함 : useRef!
- 또한 변수처럼도 사용함

- 사용 예시
    const ref = useRef('초기값');
    // console.log('ref', ref);

- 설정된 ref값은 컴포넌트가 계속해서 rendering되어도, unmount전까지 값을 유지한다!
    >> 1. 저장공간 (리렌더링을 발생시키지 않는 값을 저장할 때)
        state와 비슷하지만, 변화가 일어나도 rendering이 되지 않기 때문에, 내부변수가 초기화되지 않는다.
    >> 2. DOM요소에 접근하는 방식으로 사용됨


4. useContext

- props를 이용하면 prop drilling 현상이 나타날 수 있다.
- react context API, useContext hook을 통해 전역 데이터를 관리할 수 있다.

- 필수개념
    createContext: context 생성 
        >> FamilyContext.js
        import { createContext } from "react";
        export const FamilyContext = createContext(null);
    Consumer: context 변화 감지 >> consumer보다 아래 Child에서처럼 받는게 더 좋다고 한다.
        ref. https://velog.io/@public_danuel/trendy-react-usecontext
    Provider: context전달(하위 컴포넌트로)
        >> GrandFather.jsx에서 내려주고 싶은 내용 provider로 감싸기
        return (
        <FamilyContext.Provider value={{houseName, pocketMoney}}>
            <Father />
        </FamilyContext.Provider>
        )

        >>Child.jsx에서 받아서 사용하기
        const data = useContext(FamilyContext);

- useContext를 사용할 때, Provider에서 제공한 value가 달라지면, 모든 useContext를 사용하는 컴포넌트가 리렌더링 됨!
    >너무 비효율적이므로 항상 신경써주기! (memoization으로 관리할 수도 있어)


5. 최적화(React.memo, useCallback, useMemo)

- re-rendering의 발생조건
    1. 컴포넌트에서 state 변화
    2. 컴포넌트가 내려받은 props 변경
    3. 부모 컴포넌트가 re-rendering된 경우 자식 컴포넌트 모두

- 리렌더링이 빈번하게 일어나면 cost가 발생하므로, 최적화(Optimization)가 필요하다.
    cf. 캐싱: 컴포넌트를 임시적으로 메모리에 저장해두는 것

    #1. React.memo: 컴포넌트를 캐싱 = 컴포넌트 자체를 메모이제이션
        -[3. 부모 컴포넌트가 re-rendering된 경우 자식 컴포넌트 모두]의 경우에 해당.
        -import { memo } from "react"; / React.memo 두가지 방식으로 사용.


    #2. useCallback: 함수를 캐싱 = 인자로 들어오는 함수 자체를 기억(메모이제이션)
        -[2. 컴포넌트가 내려받은 props 변경]의 경우에 해당.
        -const initCount = useCallback(() => { setCount(0)}, []); 
                                                      >>의존성 배열이 필요함.
        -함수도 JS에서는 객체의 일종으로, 메모리에 직접적으로 저장되는 것이 아니라 별도의 공간에 할당, 그 주소를 저장한다.
        -함수형 컴포넌트가 리렌더링 되며 함수들이 다시 만들어질 때, 새로운 공간에 함수를 할당하며 새로운 주소를 저장한다.
        -즉 저장된 주소값이 바뀌며 => props를 내릴 때 새로운 주소값을 내리므로,
        -props를 받는 입장에서는 props가 변경된 것으로 알게 된다!


    #3. useMemo: 값을 캐싱 = value(함수가 return하는 값, 혹은 값자체)를 메모이제이션.
        -const value = useMemo(()=> {return 반환할_함수()}, [dependencyArray]);
                                                >> 의존성 배열의 값이 변경될때만 반환할_함수 호출!
        -그 외의 경우에는 memoization 해뒀던 값만 호출!
        
        -heavy work가 들어간 경우에 사용하면 좋다.
            const value = useMemo(()=> heavyWork(), []);

        -#2의 내용과 마찬가지로, 객체는 리렌더링이 될 때마다 새로운 주소를 할당받으므로
        -값이 변경되지 않은 경우에도, 새로운 주소에 저장된 것으로 간주된다.
        -이 때 실질적인 값이 변허지 않는다면 useMemo를 통해 메모이제이션 할 수 있다.

        -useMemo를 남발하면 별도의 메모리를 너무 많이 확보하게 되어서, 오히려 성능이 악화될 수 있다.